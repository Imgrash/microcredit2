#include <iostream>
#include <string>
#include <fstream>
#include <ctime>
using namespace std;

const int poryadok = 32;

bool * converttobinary(char c)
{
	int cc = c;
	int *result1;
	result1 = new int[8];
	int i = 0;
	do
	{
		result1[i] = cc % 2;
		cc = cc / 2;
		i++;
	} while (cc > 0);
	bool *result = new bool[8];
	int j = 0;
	for (; j < 8 - i; j++)
		result[j] = 0;
	for (; j < 8; j++)
	{
		if (result1[8 - j - 1] == 1)
			result[j] = 1;
		else
			result[j] = 0;
	}
	return result;
}

class node
{
public:
	bool value;
	node *next;
	node(bool val, node *nex)
	{
		value = val;
		next = nex;
	};
};

class interestRate
{
public:
	float value;
	interestRate *next;
	interestRate(float val)
	{
		value = val;
		next = NULL;
	};
};

int adNumber(int number, char S, bool afterDot)
{
	number *= 10;
	switch (S)
	{
	case '0':
		if (number == 0 && !afterDot)
			number = -1;
		break;
	case '1':
		number += 1;
		break;
	case '2':
		number += 2;
		break;
	case '3':
		number += 3;
		break;
	case '4':
		number += 4;
		break;
	case '5':
		number += 5;
		break;
	case '6':
		number += 6;
		break;
	case '7':
		number += 7;
		break;
	case '8':
		number += 8;
		break;
	case '9':
		number += 9;
		break;
	default:
		number = -1;
	}
	return number;
};

string adNumberString(string number, char S)
{
	switch (S)
	{
	case '0':
		number += '0';
		break;
	case '1':
		number += '1';
		break;
	case '2':
		number += '2';
		break;
	case '3':
		number += '3';
		break;
	case '4':
		number += '4';
		break;
	case '5':
		number += '5';
		break;
	case '6':
		number += '6';
		break;
	case '7':
		number += '7';
		break;
	case '8':
		number += '8';
		break;
	case '9':
		number += '9';
		break;
	default:
		number = "-1";
	}
	return number;
};

bool checkDate(int formerDD, int formerMM, int formerYYYY)
{
	time_t rawtime;
	struct tm * timeinfo;
	time(&rawtime);                         // текущая дата, выраженная в секундах
	timeinfo = localtime(&rawtime);        // текущая дата, представленная в нормальной форме

	if (1900 + timeinfo->tm_year < formerYYYY)
		return false;
	else if (1900 + timeinfo->tm_year == formerYYYY && 1 + timeinfo->tm_mon < formerMM)
		return false;
	else if ( (1900 + timeinfo->tm_year == formerYYYY) && (1 + timeinfo->tm_mon == formerMM) && timeinfo->tm_mday < formerDD)
		return false;
	if (formerMM < 1 || formerMM > 12)
		return false;

	int fDD = 28;
	switch (formerMM)
	{
	case 1:
		if (formerDD < 1 || formerDD > 31)
			return false;
		break;
	case 2:
		if (formerYYYY % 400 == 0)
			fDD = 29;
		else if (formerYYYY % 100 == 0)
			fDD = 28;
		else if(formerYYYY % 4 == 0)
			fDD = 29;
		if (formerDD < 1 || formerDD > fDD)
			return false;
		break;
	case 3:
		if (formerDD < 1 || formerDD > 31)
			return false;
		break;
	case 4:
		if (formerDD < 1 || formerDD > 30)
			return false;
		break;
	case 5:
		if (formerDD < 1 || formerDD > 31)
			return false;
		break;
	case 6:
		if (formerDD < 1 || formerDD > 30)
			return false;
		break;
	case 7:
		if (formerDD < 1 || formerDD > 31)
			return false;
		break;
	case 8:
		if (formerDD < 1 || formerDD > 31)
			return false;
		break;
	case 9:
		if (formerDD < 1 || formerDD > 30)
			return false;
		break;
	case 10:
		if (formerDD < 1 || formerDD > 31)
			return false;
		break;
	case 11:
		if (formerDD < 1 || formerDD > 30)
			return false;
		break;
	case 12:
		if (formerDD < 1 || formerDD > 31)
			return false;
		break;
	default:
		return false;
	}
	return true;
};

bool checkTime(int tempHH, int tempMM, int tempSS)
{
	if (tempHH < 0 || tempHH >23)
		return false;
	if (tempMM < 0 || tempMM >59)
		return false;
	if (tempSS < 0 || tempSS >59)
		return false;
	return true;
};


bool * makeCRC(node *firstF, node *polinom)
{
	node *first = new node(firstF->value, NULL), *thirty_two;
	thirty_two = first;
	node *temp = firstF->next;
	while (temp != NULL)
	{
		thirty_two->next = new node(temp->value, NULL);
		thirty_two = thirty_two->next;
		temp = temp->next;
	}
	int i;
	node *pokaz, *one, *tempPolinom;
	pokaz = first;
	one = pokaz->next;
	thirty_two = one;
	for (i = 1; i < poryadok; i++)
		thirty_two = thirty_two->next;
	do
	{
		tempPolinom = polinom;
		temp = one;
		do
		{
			if (tempPolinom->value == 1)
			{
				if (temp->value == pokaz->value)
					temp->value = 0;
				else
					temp->value = 1;
			}
			temp = temp->next;
			tempPolinom = tempPolinom->next;
		} while (tempPolinom != NULL);
		pokaz = pokaz->next;
		one = one->next;
		thirty_two = thirty_two->next;
	} while (thirty_two->next != NULL);

	tempPolinom = polinom;
	temp = one;
	do
	{
		if (tempPolinom->value == 1)
		{
			if (temp->value == pokaz->value)
				temp->value = 0;
			else
				temp->value = 1;
		}
		temp = temp->next;
		tempPolinom = tempPolinom->next;
	} while (tempPolinom != NULL);

	bool * CRC = new bool[poryadok];
	for (i = 0; i < poryadok; i++)
	{
		CRC[i] = one->value;
		one = one->next;
	}
	return CRC;
};


bool * makeCRC(node *first, node *polinom)
{
	int i;
	node *pokaz, *one, *thirty_two, *tempPolinom, *temp;
	pokaz = first;
	one = pokaz->next;
	thirty_two = one;
	for (i = 1; i < 32; i++)
		thirty_two = thirty_two->next;

	while (thirty_two->next != NULL)
	{
		if (pokaz->value == 1)
		{
			temp = one;
			tempPolinom = polinom;
			do
			{
				if (temp->value == tempPolinom->value)
					temp->value = 0;
				else
					temp->value = 1;
				temp = temp->next;
				tempPolinom = tempPolinom->next;
			} while (tempPolinom != NULL);
		}
		pokaz = pokaz->next;
		one = one->next;
		thirty_two = thirty_two->next;
	}
	bool CRC[32];
	for (i = 0; i < 32; i++)
	{
		CRC[i] = one->value;
		one = one->next;
	}
	return CRC;
};

string codeNumber = "";//1
string prefix = "";    //2
int formerNumber = 0;  //3
int tempNumber = 0;  //3
float maxSumm = 0;     //4
float minSumm = 0;     //5
int maxTermInDays = 0; //6
int minTermInDays = 0; //7
interestRate *IRfirst;   //8
interestRate *IRlast;    //
string formerDate;     //9
int formerDD = 0;
int formerMM = 0;
int formerYYYY = 0;


int main()
{
	setlocale(LC_ALL, "Russian");
	int i;

	string fname1 = "file1.txt";
	ifstream f(fname1);

	bool thatsFine = false;
	int countField = 1;//номер вводимого поля
	if (f.is_open())
	{
		char S = ' ';
		int inWhich = 1;
		bool afterDot = false;
		int beforeDotNumber = 0;
		int afterDotNumber = 0;
		int afterDotCount = 0;
		int datePlace = 1; //1 = ДД, 2 = ММ, 3 = ГГГГ
		int dd = 0;
		int mm = 0;
		int percentInt = 0;
		int yyyy = 0;
		while (!f.eof())
		{
			f.get(S);
			if (!f.eof())
			{
				if (S == 0x0D || S == 0x0A)
				{
					if (countField == 5)
					{
						if (afterDotCount == 1)
						{
							cout << "што1" << endl;
							goto gohere;
						}
						minSumm = afterDotNumber;
						minSumm /= 100;
						minSumm += beforeDotNumber;

						afterDotNumber = 0; beforeDotNumber = 0;
						if (minSumm == 0)
						{
							cout << "што2" << endl;
							goto gohere;
						}
						if (minSumm > maxSumm)
						{
							cout << "што3" << endl;
							goto gohere;
						}
						afterDot = false;
					}
					if (countField == 7)
						if (maxTermInDays < minTermInDays)
						{
							cout << "што4" << endl;
							goto gohere;
						}
					if (countField == 8)
					{
						if (afterDotCount == 1)
						{
							cout << "што5" << endl;
							goto gohere;
						}
						float val = afterDotNumber;
						val /= 100;
						val += beforeDotNumber;

						afterDotNumber = 0; beforeDotNumber = 0;
						if (val == 0)
						{
							cout << "што6" << endl;
							goto gohere;
						}
						afterDot = false;
						if (IRfirst == NULL)
						{
							IRfirst = new interestRate(val);
							IRlast = IRfirst;
						}
						else
						{
							IRlast->next = new interestRate(val);
							IRlast = IRlast->next;
						}
					}
					if(countField < 9)
						countField++;
				}
				else if (S == ';')
				{
					cout << "што0" << endl;
					goto gohere;
				}
				else
				{
					switch (countField)
					{
					case 1:
						codeNumber = adNumberString(codeNumber, S);
						if (codeNumber == "-1")
						{
							cout << "што7" << endl;
							goto gohere;
						}
						break;
					case 2:
						prefix += S;
						break;
					case 3:
						formerNumber = adNumber(formerNumber, S, false);
						if (formerNumber == -1)
						{
							cout << "што8" << endl;
							goto gohere;
						}
						break;
					case 4:
						if (S == ' ')
						{
							if (afterDotCount == 1)
							{
								cout << "што9" << endl;
								goto gohere;
							}
							maxSumm = afterDotNumber;
							maxSumm /= 100;
							maxSumm += beforeDotNumber;

							afterDotNumber = 0; beforeDotNumber = 0;
							if (maxSumm == 0)
							{
								cout << "што10" << endl;
								goto gohere;
							}
							afterDot = false;
							countField++;
						}
						else if (S == '.')
						{
							afterDot = true;
							afterDotNumber = 0;
							afterDotCount = 0;
						}
						else
						{
							if (afterDot)
							{
								afterDotNumber = adNumber(afterDotNumber, S, true);
								if (afterDotNumber == -1)
								{
									cout << "што11" << endl;
									goto gohere;
								}
								afterDotCount++;
								if (afterDotCount > 2)
								{
									cout << "што12" << endl;
									goto gohere;
								}
							}
							else
							{
								beforeDotNumber = adNumber(beforeDotNumber, S, false);
								if (beforeDotNumber == -1)
								{
									cout << "што13" << endl;
									goto gohere;
								}
							}
						}
						break;
					case 5:
						if (S == '.')
						{
							afterDot = true;
							afterDotNumber = 0;
							afterDotCount = 0;
						}
						else
						{
							if (afterDot)
							{
								afterDotNumber = adNumber(afterDotNumber, S, true);
								if (afterDotNumber == -1)
								{
									cout << "што14" << endl;
									goto gohere;
								}
								afterDotCount++;
								if (afterDotCount > 2)
								{
									cout << "што15" << endl;
									goto gohere;
								}
							}
							else
							{
								beforeDotNumber = adNumber(beforeDotNumber, S, false);
								if (beforeDotNumber == -1)
								{
									cout << "што16" << endl;
									goto gohere;
								}
							}
						}
						break;
					case 6:
						if (S == ' ')
						{
							if (maxTermInDays == 0)
							{
								cout << "што17" << endl;
								goto gohere;
							}
							countField++;
						}
						else
						{
							maxTermInDays = adNumber(maxTermInDays, S, false);
							if (maxTermInDays == -1)
							{
								cout << "што18" << endl;
								goto gohere;
							}
						}
						break;
					case 7:
						minTermInDays = adNumber(minTermInDays, S, false);
						if (minTermInDays == -1)
						{
							cout << "што19" << endl;
							goto gohere;
						}
						break;
					case 8:
						/*
						interestRate *first;   //6
						interestRate *last;    //
						*/
						if (S == ' ')
						{
							if (afterDotCount == 1)
							{
								cout << "што20" << endl;
								goto gohere;
							}
							float val = afterDotNumber;
							val /= 100;
							val += beforeDotNumber;

							afterDotNumber = 0; beforeDotNumber = 0;
							if (val == 0)
							{
								cout << "што21" << endl;
								goto gohere;
							}
							afterDot = false;
							if (IRfirst == NULL)
							{
								IRfirst = new interestRate(val);
								IRlast = IRfirst;
							}
							else
							{
								IRlast->next = new interestRate(val);
								IRlast = IRlast->next;
							}
						}
						else if (S == '.')
						{
							afterDot = true;
							afterDotNumber = 0;
							afterDotCount = 0;
						}
						else
						{
							if (afterDot)
							{
								percentInt = 0;
								afterDotNumber = adNumber(afterDotNumber, S, true);
								if (afterDotNumber == -1)
								{
									cout << "што22" << endl;
									goto gohere;
								}
								afterDotCount++;
								if (afterDotCount > 2)
								{
									cout << "што23" << endl;
									goto gohere;
								}
							}
							else
							{
								percentInt++;
								beforeDotNumber = adNumber(beforeDotNumber, S, true);
								if (beforeDotNumber == -1)
								{
									cout << "што24" << endl;
									goto gohere;
								}
								if(percentInt > 1 && beforeDotNumber == 0)
								{
									cout << "што24_2" << endl;
									goto gohere;
								}
							}
						}
						break;
					case 9:
						if (S == '.')
						{
							if (datePlace == 1)
							{
								if (dd != 2)
								{
									cout << "што25" << endl;
									goto gohere;
								}
							}
							else if (datePlace == 2)
							{
								if (mm != 2)
								{
									cout << "што26" << endl;
									goto gohere;
								}
							}
							else if (datePlace == 3)
							{
								if (yyyy != 4)
								{
									cout << "што27" << endl;
									goto gohere;
								}
							}
							if (datePlace < 3)
							{
								formerDate += '.';
								datePlace++;
							}
							else
							{
								cout << "што28" << endl;
								goto gohere;
							}
						}
						else
						{
							if (datePlace == 1)
							{
								if (dd < 2)
								{
									dd++;
									formerDD = adNumber(formerDD, S, true);
								}
								else
								{
									cout << "што29" << endl;
									goto gohere;
								}
							}
							else if (datePlace == 2)
							{
								if (mm < 2)
								{
									mm++;
									formerMM = adNumber(formerMM, S, true);
								}
								else
								{
									cout << "што30" << endl;
									goto gohere;
								}
							}
							else if (datePlace == 3)
							{
								if (yyyy < 4)
								{
									yyyy++;
									formerYYYY = adNumber(formerYYYY, S, true);
								}
								else
								{
									cout << "што31" << endl;
									goto gohere;
								}
							}
							
							formerDate = adNumberString(formerDate, S);
							if (formerDate == "-1")
							{
								cout << "што32" << endl;
								goto gohere;
							}
						}
					}
				}
			}
			else if (yyyy != 4)
			{
			cout << "што33" << endl;
				goto gohere;
			}
			else if (!(checkDate(formerDD, formerMM, formerYYYY)))
			{
				cout << "што34" << endl;
				goto gohere;
			}
		}		
		goto noerr;
	gohere:
		cout << "В файле с настройками ошибка" << endl;
		return 1;
	noerr:

		cout<< codeNumber <<    " | " 
			<< prefix <<        " | " 
			<< formerNumber <<  " | "
			<< maxSumm <<       " | " 
			<< minSumm <<       " | " 
			<< maxTermInDays << " | "
			<< minTermInDays << " | ";
		interestRate * temp = IRfirst;
		while (temp != NULL)
		{
			cout << temp->value << " ";
			temp = temp->next;
		}
		cout << "| " << formerDate << endl;
	}
	else
		cerr << "Файла с настройками нет" << endl;
	f.close();

	string fname2 = "file2.txt";
	f.open(fname2);

	node *lastCRCNode = new node(0, NULL);	node *last = lastCRCNode;
	bool lastCRC[31] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	for (i = 0; i < 31; i++)
	{
		last->next = new node(lastCRC[i], NULL);
		last = last->next;
	}

	node *polinom = new node(0, NULL);	last = polinom;
	bool polinomArr[31] = { 0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,0,1,1,0,1,1,1 };
	for (i = 0; i < 31; i++)
	{
		last->next = new node(polinomArr[i], NULL);
		last = last->next;
	}
	

	bool lastCRC[32] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
	countField = 1;//номер вводимого поля
	if (f.is_open())
	{
		int percentInt = 0;
		bool afterDot = false;
		int beforeDotNumber = 0;
		int afterDotNumber = 0;
		int afterDotCount = 0;
		int tempNumber = formerNumber;

		string tempCodeNumber1 = "";		
		int tempNumber2;
		string tempDate3;
		string tempTime4;
		int tempType5;
		int tempNumber6;
		string tempNumberContract7 = "";
		string Date8;
		string Date9;
		string FIO10;
		float tempSumm11;
		float tempPercent12;
		string text13;
		bool tempCRC[32];
		

		node **pokaz, *first = NULL; last = NULL;
		char S = ' ';
		int crccount = 0;

		bool beforeSlash = 1;
		int datePlace = 1; //1 = ДД, 2 = ММ, 3 = ГГГГ
		int dd = 0;
		int mm = 0;
		int yyyy = 0;
		int tempDD = 0;
		int tempMM = 0;
		int tempYYYY = 0;

		int timePlace = 1; //1 = ЧЧ, 2 = ММ, 3 = СС
		int hh = 0;
		int min = 0;
		int ss = 0;
		int tempHH = 0;
		int tempMIN = 0;
		int tempSS = 0;

		while (!f.eof())
		{
			f.get(S);
			if (!f.eof())
			{
				if (S == 0x0D || S == 0x0A)
				{
					if (countField == 1)
					{
						if (codeNumber != tempCodeNumber1)
						{
							cout << "што7" << endl;
							goto gohere2;
						}
					}
					if (countField == 2)
					{
						if (tempNumber != tempNumber2)
						{
							cout << "што7" << endl;
							goto gohere2;
						}
					}
					if (countField == 3)
					{
						if (!(checkDate(tempDD, tempMM, tempYYYY)))
						{
							cout << "што34" << endl;
							goto gohere2;
						}
						tempDD = 0;
						tempMM = 0;
						tempYYYY = 0;
						dd = 0;
						mm = 0;
						yyyy = 0;
						datePlace = 1;
					}
					if (countField == 4)
					{
						if (!(checkTime(tempHH, tempMIN, tempSS)))
						{
							cout << "што34" << endl;
							goto gohere2;
						}
						tempHH = 0;
						tempMIN = 0;
						tempSS = 0;
						hh = 0;
						min = 0;
						ss = 0;
						timePlace = 1;
					}
					if (countField == 6 && (tempType5 == 3 || tempType5 == 4) )
					{
						if (tempNumber6 < formerNumber || tempNumber6 > tempNumber)
						{
							cout << "што7" << endl;
							goto gohere2;
						}
						timePlace = 0;
						datePlace = 0;
					}
					if (countField == 7 && tempNumberContract7 != "")
					{
						tempSS = 0;
						if (!(checkTime(tempHH, tempMIN, tempSS)))
						{
							cout << "што34" << endl;
							goto gohere2;
						}
						tempYYYY += 2000;
						if (!(checkDate(tempDD, tempMM, tempYYYY)))
						{
							cout << "што34" << endl;
							goto gohere2;
						}
						if (tempYYYY < formerYYYY)
						{
							cout << "што34" << endl;
							goto gohere2;
						}
						else if (tempYYYY == formerYYYY && tempMM < formerMM)
						{
							cout << "што34" << endl;
							goto gohere2;
						}
						else if ((tempYYYY == formerYYYY) && (tempMM == formerMM) && tempDD < formerDD)
						{
							cout << "што34" << endl;
							goto gohere2;
						}

						tempHH = 0;
						tempMIN = 0;
						tempSS = 0;
						tempYYYY = 0;
						tempMM = 0;
						tempDD = 0;
						
						hh = 0;
						min = 0;
						ss = 0;
						yyyy = 0;
						mm = 0;
						dd = 0;

						timePlace = 1;
						datePlace = 1;
					}
					if (countField == 8)
					{
						if (!(checkDate(tempDD, tempMM, tempYYYY)))
						{
							cout << "што34" << endl;
							goto gohere2;
						}
						tempDD = 0;
						tempMM = 0;
						tempYYYY = 0;
						dd = 0;
						mm = 0;
						yyyy = 0;
						datePlace = 1;
					}
					if (countField == 9 && Date9 != "")
					{
						if (!(checkDate(tempDD, tempMM, tempYYYY)))
						{
							cout << "што34" << endl;
							goto gohere2;
						}
						tempDD = 0;
						tempMM = 0;
						tempYYYY = 0;
						dd = 0;
						mm = 0;
						yyyy = 0;
						datePlace = 1;
					}
					if (countField == 11)
					{
						if (afterDotCount == 1)
						{
							cout << "што1" << endl;
							goto gohere2;
						}
						tempSumm11 = afterDotNumber;
						tempSumm11 /= 100;
						tempSumm11 += beforeDotNumber;

						afterDotNumber = 0; beforeDotNumber = 0;
						if (tempSumm11 > maxSumm && tempSumm11 < minSumm)
						{
							cout << "што3" << endl;
							goto gohere2;
						}
						afterDot = false;
					}
					if (countField == 12)
					{
						if (afterDotCount == 1)
						{
							cout << "што5" << endl;
							goto gohere2;
						}
						float val = afterDotNumber;
						val /= 100;
						val += beforeDotNumber;

						afterDotNumber = 0; beforeDotNumber = 0;
						if (val == 0)
						{
							cout << "што6" << endl;
							goto gohere2;
						}
						afterDot = false;

						interestRate * IRtemp = IRfirst;
						while (IRtemp != NULL && tempPercent12 != IRtemp->value)
						{
							IRtemp = IRtemp->next;
						}
						if (IRtemp == NULL)
						{
							cout << "што6" << endl;
							goto gohere2;
						}
					}
					if (countField == 13)
					{
						if (text13 == "" && (tempType5 == 3 || tempType5 == 4 || tempType5 == 5 || tempType5 == 6))
						{
							cout << "што6" << endl;
							goto gohere2;
						}
					}
					countField++;
					if (countField > 14)
					{
						cout << "што7" << endl;
						goto gohere2;
					}
				}
				else if (S == ';')
				{
					if (crccount != 32)
					{
						cout << "што34" << endl;
						goto gohere2;
					}
					/*проверка crc*/
					/*структура такая:
					основное поле + его crc
					проверяем не с нулями, как в классическом варианте, а с предыдущим crc
					*/
					bool *CRC = makeCRC(first, polinom);
					for (i = 0; i < 32; i++)
					{
						if (CRC[i] != lastCRC[i])
						{
							cout << "што3" << endl;
							goto gohere2;
						}
						lastCRC[i] = tempCRC[i];
					}

					cout << tempCodeNumber1 << " "
						<< tempNumber2 << " "
						<< tempDate3 << " "
						<< tempTime4 << " "
						<< tempType5 << " "
						<< tempNumber6 << " "
						<< tempNumberContract7 << " "
						<< Date8 << " "
						<< Date9 << " "
						<< FIO10 << " "
						<< tempSumm11 << " "
						<< tempPercent12 << " "
						<< text13 << " ";
					bool tempCRC[32];

					tempNumber++;
					crccount = 0;
					countField = 1;
					first = NULL; last = NULL;
				}
				else
				{
					switch (countField)
					{
					case 1:
						tempCodeNumber1 = adNumberString(tempCodeNumber1, S);
						if (tempCodeNumber1 == "-1")
						{
							cout << "што7" << endl;
							goto gohere2;
						}
						break;
					case 2:
						tempNumber2 = adNumber(tempNumber2, S, false);
						if (tempNumber2 == -1)
						{
							cout << "што8" << endl;
							goto gohere2;
						}
						break;
					case 3:
						if (S == '.')
						{
							if (datePlace == 1)
							{
								if (dd != 2)
								{
									cout << "што25" << endl;
									goto gohere2;
								}
							}
							else if (datePlace == 2)
							{
								if (mm != 2)
								{
									cout << "што26" << endl;
									goto gohere2;
								}
							}
							else if (datePlace == 3)
							{
								if (yyyy != 4)
								{
									cout << "што27" << endl;
									goto gohere2;
								}
							}
							if (datePlace < 3)
							{
								tempDate3 += '.';
								datePlace++;
							}
							else
							{
								cout << "што28" << endl;
								goto gohere2;
							}
						}
						else
						{
							if (datePlace == 1)
							{
								if (dd < 2)
								{
									dd++;
									tempDD = adNumber(tempDD, S, true);
								}
								else
								{
									cout << "што29" << endl;
									goto gohere2;
								}
							}
							else if (datePlace == 2)
							{
								if (mm < 2)
								{
									mm++;
									tempMM = adNumber(tempMM, S, true);
								}
								else
								{
									cout << "што30" << endl;
									goto gohere2;
								}
							}
							else if (datePlace == 3)
							{
								if (yyyy < 4)
								{
									yyyy++;
									tempYYYY = adNumber(tempYYYY, S, true);
								}
								else
								{
									cout << "што31" << endl;
									goto gohere2;
								}
							}
							tempDate3 = adNumberString(tempDate3, S);
							if (tempDate3 == "-1")
							{
								cout << "што32" << endl;
								goto gohere2;
							}
						}
						break;
					case 4:
						if (S == '.')
						{
							if (timePlace == 1)
							{
								if (hh != 2)
								{
									cout << "што25" << endl;
									goto gohere2;
								}
							}
							else if (timePlace == 2)
							{
								if (min != 2)
								{
									cout << "што26" << endl;
									goto gohere2;
								}
							}
							else if (timePlace == 3)
							{
								if (ss != 2)
								{
									cout << "што27" << endl;
									goto gohere2;
								}
							}
							if (timePlace < 3)
							{
								tempTime4 += '.';
								timePlace++;
							}
							else
							{
								cout << "што28" << endl;
								goto gohere2;
							}
						}
						else
						{
							if (timePlace == 1)
							{
								if (hh < 2)
								{
									hh++;
									tempHH = adNumber(tempHH, S, true);
								}
								else
								{
									cout << "што29" << endl;
									goto gohere2;
								}
							}
							else if (timePlace == 2)
							{
								if (min < 2)
								{
									min++;
									tempMIN = adNumber(tempMIN, S, true);
								}
								else
								{
									cout << "што30" << endl;
									goto gohere2;
								}
							}
							else if (timePlace == 3)
							{
								if (ss < 2)
								{
									ss++;
									tempSS = adNumber(tempSS, S, true);
								}
								else
								{
									cout << "што31" << endl;
									goto gohere2;
								}
							}
							tempTime4 = adNumberString(tempTime4, S);
							if (tempTime4 == "-1")
							{
								cout << "што32" << endl;
								goto gohere2;
							}
						}
						break;
					case 5:
						tempType5 = adNumber(tempType5, S, false);
						if (tempType5 < 1 || tempType5 > 6)
						{
							cout << "што8" << endl;
							goto gohere2;
						}
						break;
					case 6:
						if(tempType5 == 3 || tempType5 == 4)
						{
							tempNumber6 = adNumber(tempNumber6, S, false);
							if (tempNumber6 == -1)
							{
								cout << "што8" << endl;
								goto gohere2;
							}							
						}
						break;
					case 7:
						if (!beforeSlash)
						{
							tempNumberContract7 = adNumberString(tempNumberContract7, S);
							if (tempNumberContract7 == "-1")
							{
								cout << "што7" << endl;
								goto gohere2;
							}
						}
						if (beforeSlash)
						{
							if (S == '/')
							{
								if (tempNumberContract7 != prefix)
								{
									cout << "што8" << endl;
									goto gohere2;
								}
								beforeSlash = 0;
								datePlace = 1;
							}
							tempNumberContract7 += S;
						}						
						else if (datePlace == 1)
						{
							yyyy++;
							if(yyyy == 2)
							{
								datePlace = 2;
							}
							tempYYYY = adNumber(tempYYYY, S, false);
							if (tempYYYY == -1)
							{
								cout << "што8" << endl;
								goto gohere2;
							}
						}
						else if (datePlace == 2)
						{
							mm++;
							if (mm == 2)
							{
								datePlace = 3;
							}
							tempMM = adNumber(tempMM, S, false);
							if (tempMM == -1)
							{
								cout << "што8" << endl;
								goto gohere2;
							}
						}
						else if (datePlace == 3)
						{
							dd++;
							if (dd == 2)
							{
								datePlace = 0;
								timePlace = 1;
							}
							tempDD = adNumber(tempDD, S, false);
							if (tempDD == -1)
							{
								cout << "што8" << endl;
								goto gohere2;
							}
						}
						else if (timePlace == 1)
						{
							hh++;
							if (hh == 2)
							{
								timePlace = 2;
							}
							tempHH = adNumber(tempHH, S, false);
							if (tempHH == -1)
							{
								cout << "што8" << endl;
								goto gohere2;
							}
						}
						else if (timePlace == 2)
						{
							min++;
							if (min == 2)
							{
								datePlace = 0;
								timePlace = 0;
							}
							tempMIN = adNumber(tempMIN, S, false);
							if (tempMIN == -1)
							{
								cout << "што8" << endl;
								goto gohere2;
							}
						}
						else if (datePlace == 0)
						{
							cout << "што8" << endl;
							goto gohere2;
						}
						break;
					case 8:
						if (S == '.')
						{
							if (datePlace == 1)
							{
								if (dd != 2)
								{
									cout << "што25" << endl;
									goto gohere2;
								}
							}
							else if (datePlace == 2)
							{
								if (mm != 2)
								{
									cout << "што26" << endl;
									goto gohere2;
								}
							}
							else if (datePlace == 3)
							{
								if (yyyy != 4)
								{
									cout << "што27" << endl;
									goto gohere2;
								}
							}
							if (datePlace < 3)
							{
								Date8 += '.';
								datePlace++;
							}
							else
							{
								cout << "што28" << endl;
								goto gohere2;
							}
						}
						else
						{
							if (datePlace == 1)
							{
								if (dd < 2)
								{
									dd++;
									tempDD = adNumber(tempDD, S, true);
								}
								else
								{
									cout << "што29" << endl;
									goto gohere2;
								}
							}
							else if (datePlace == 2)
							{
								if (mm < 2)
								{
									mm++;
									tempMM = adNumber(tempMM, S, true);
								}
								else
								{
									cout << "што30" << endl;
									goto gohere2;
								}
							}
							else if (datePlace == 3)
							{
								if (yyyy < 4)
								{
									yyyy++;
									tempYYYY = adNumber(tempYYYY, S, true);
								}
								else
								{
									cout << "што31" << endl;
									goto gohere2;
								}
							}
							Date8 = adNumberString(Date8, S);
							if (Date8 == "-1")
							{
								cout << "што32" << endl;
								goto gohere2;
							}
						}
						break;
					case 9:
						if (S == '.')
						{
							if (datePlace == 1)
							{
								if (dd != 2)
								{
									cout << "што25" << endl;
									goto gohere2;
								}
							}
							else if (datePlace == 2)
							{
								if (mm != 2)
								{
									cout << "што26" << endl;
									goto gohere2;
								}
							}
							else if (datePlace == 3)
							{
								if (yyyy != 4)
								{
									cout << "што27" << endl;
									goto gohere2;
								}
							}
							if (datePlace < 3)
							{
								Date9 += '.';
								datePlace++;
							}
							else
							{
								cout << "што28" << endl;
								goto gohere2;
							}
						}
						else
						{
							if (datePlace == 1)
							{
								if (dd < 2)
								{
									dd++;
									tempDD = adNumber(tempDD, S, true);
								}
								else
								{
									cout << "што29" << endl;
									goto gohere2;
								}
							}
							else if (datePlace == 2)
							{
								if (mm < 2)
								{
									mm++;
									tempMM = adNumber(tempMM, S, true);
								}
								else
								{
									cout << "што30" << endl;
									goto gohere2;
								}
							}
							else if (datePlace == 3)
							{
								if (yyyy < 4)
								{
									yyyy++;
									tempYYYY = adNumber(tempYYYY, S, true);
								}
								else
								{
									cout << "што31" << endl;
									goto gohere2;
								}
							}
							Date9 = adNumberString(Date9, S);
							if (Date9 == "-1")
							{
								cout << "што32" << endl;
								goto gohere2;
							}
						}
						break;
					case 10:
						FIO10 += S;
						break;
					case 11:
						if (S == '.')
						{
							afterDot = true;
							afterDotNumber = 0;
							afterDotCount = 0;
						}
						else
						{
							if (afterDot)
							{
								afterDotNumber = adNumber(afterDotNumber, S, true);
								if (afterDotNumber == -1)
								{
									cout << "што11" << endl;
									goto gohere2;
								}
								afterDotCount++;
								if (afterDotCount > 2)
								{
									cout << "што12" << endl;
									goto gohere2;
								}
							}
							else
							{
								beforeDotNumber = adNumber(beforeDotNumber, S, false);
								if (beforeDotNumber == -1)
								{
									cout << "што13" << endl;
									goto gohere2;
								}
							}
						}
						break;
					case 12:
						if (S == '.')
						{
							afterDot = true;
							afterDotNumber = 0;
							afterDotCount = 0;
						}
						else
						{
							if (afterDot)
							{
								percentInt = 0;
								afterDotNumber = adNumber(afterDotNumber, S, true);
								if (afterDotNumber == -1)
								{
									cout << "што22" << endl;
									goto gohere2;
								}
								afterDotCount++;
								if (afterDotCount > 2)
								{
									cout << "што23" << endl;
									goto gohere2;
								}
							}
							else
							{
								percentInt++;
								beforeDotNumber = adNumber(beforeDotNumber, S, true);
								if (beforeDotNumber == -1)
								{
									cout << "што24" << endl;
									goto gohere2;
								}
								if (percentInt > 1 && beforeDotNumber == 0)
								{
									cout << "што24_2" << endl;
									goto gohere2;
								}
							}
						}
						break;
					case 13:
						text13 += S;
						break;
					case 14:
						if (S == '1')
							tempCRC[crccount] = 1;
						else if(S == '0')
							tempCRC[crccount] = 0;
						else
						{
							cout << "што23" << endl;
							goto gohere2;
						}

					}
					/*
					1) считали символ S
					2) переводим его в двоичный код
					3)присоединяем к имеющемуся коду строки
					*/
					node *tfirst, *tlast;
					if (countField != 14)
					{
						bool *binary = converttobinary(S);
						tfirst = new node(binary[0], NULL);
						tlast = tfirst;
						for (i = 1; i < 8; i++)
						{
							tlast->next = new node(binary[1], NULL);
							tlast = tlast->next;
						}
					}
					else
					{
						tfirst = new node(tempCRC[crccount], NULL);
						tlast = tfirst;
						crccount++;
					}

					if (first == NULL)
					{
						first = tfirst;
						last = tlast;
					}
					else
					{
						last->next = tfirst;
						last = tlast;
					}

				}
			}
		}
		goto noerr2;
	gohere2:
		cout << "В файле с данными ошибка" << endl;
		return 1;
	noerr2:
		f.close();
	}
	else
	{
		ofstream s;
		s.open(fname2, ios_base::app);
		s.close();
	}

	return 0;
}
